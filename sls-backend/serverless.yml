# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: sls-backend
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 128
  timeout: 10

  # you can overwrite defaults here
  stage: dev
  region: ap-south-1

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'ses:*'
        # - 'ses:SendRawEmail'
      Resource: '*'
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  createUser:
    handler: handler.createUser
    events:
      - http:
          path: users
          method: POST
  login:
    handler: handler.login
    events:
      - http:
          path: auth
          method: POST
  getUser:
    handler: handler.getUser
    events:
      - http:
          path: auth
          method: GET
  createPost:
    handler: handler.createPost
    events:
      - http:
          path: posts
          method: POST
  getPosts:
    handler: handler.getPosts
    events:
      - http:
          path: posts
          method: GET
  getPostsByUser:
    handler: handler.getPostsByUser
    events:
      - http:
          path: users/{user}/posts
          method: GET
  updatePost:
    handler: handler.updatePost
    events:
      - http:
          path: posts/{id}
          method: PUT
  getPostById:
    handler: handler.getPostById
    events:
      - http:
          path: posts/{id}
          method: GET
  searchPosts:
    handler: handler.searchPosts
    events:
      - http:
          path: search/posts
          method: GET
  updateAnalytics:
    handler: handler.updateAnalytics
    events:
      - http:
          path: posts/analytics/{id}
          method: POST
  confirmEmail:
    handler: handler.confirmEmail
    events:
      - http:
          path: posts/confirmation/{token}
          method: GET
  # sendEmails:
  #   handler: handler.sendEmails
  #   events:
  #     - http:
  #         path: email/send
  #         method: POST
  #         cors: true

  # test:
  #   handler: handler.test
  #   events:
  #     - http:
  #         path: test
  #         method: GET
  #         cors:
  #           origin: '*'

  # cors:
  #   origin: '*'
  #   headers:
  #     - Content-Type
  #     - x-auth-token

useDotenv: true

plugins:
  - serverless-offline
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
